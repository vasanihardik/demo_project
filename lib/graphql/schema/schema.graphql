schema  { query: query_root mutation: mutation_root subscription: subscription_root }

type __Directive { args: __InputValue
  description: String!
  isRepeatable: String!
  locations: String!
  name: String!
}

type __EnumValue { deprecationReason: String!
  description: String!
  isDeprecated: String!
  name: String!
}

type __Field { args: __InputValue
  deprecationReason: String!
  description: String!
  isDeprecated: String!
  name: String!
  type: __Type
}

type __InputValue { defaultValue: String!
  description: String!
  name: String!
  type: __Type
}

type __Schema { description: String!
  directives: __Directive
  mutationType: __Type
  queryType: __Type
  subscriptionType: __Type
  types: __Type
}

type __Type { description: String!
  enumValues(includeDeprecated: Boolean = false): __EnumValue
  fields(includeDeprecated: Boolean = false): __Field
  inputFields: __InputValue
  interfaces: __Type
  kind: __TypeKind!
  name: String!
  ofType: __Type
  possibleTypes: __Type
}

type query_root { "fetch aggregated fields from the table: \"Graph_ql\"" 
Graph_ql_aggregate("filter the rows returned" 
where: Graph_ql_bool_exp, "sort the rows by one or more columns" 
order_by: [Graph_ql_order_by!], "limit the number of rows returned" 
limit: Int, "skip the first n rows. Use only with order_by" 
offset: Int, "distinct select on columns" 
distinct_on: [Graph_ql_select_column!]): Graph_ql_aggregate!
  "fetch data from the table: \"Graph_ql\"" 
Graph_ql("filter the rows returned" 
where: Graph_ql_bool_exp, "sort the rows by one or more columns" 
order_by: [Graph_ql_order_by!], "limit the number of rows returned" 
limit: Int, "skip the first n rows. Use only with order_by" 
offset: Int, "distinct select on columns" 
distinct_on: [Graph_ql_select_column!]): [Graph_ql!]!
  "fetch data from the table: \"Graph_ql\" using primary key columns" 
Graph_ql_by_pk(id: Int!): Graph_ql
}

type subscription_root { "fetch aggregated fields from the table: \"Graph_ql\"" 
Graph_ql_aggregate("filter the rows returned" 
where: Graph_ql_bool_exp, "sort the rows by one or more columns" 
order_by: [Graph_ql_order_by!], "limit the number of rows returned" 
limit: Int, "skip the first n rows. Use only with order_by" 
offset: Int, "distinct select on columns" 
distinct_on: [Graph_ql_select_column!]): Graph_ql_aggregate!
  "fetch data from the table in a streaming manner: \"Graph_ql\"" 
Graph_ql_stream("filter the rows returned" 
where: Graph_ql_bool_exp, "cursor to stream the results returned by the query" 
cursor: [Graph_ql_stream_cursor_input]!, "maximum number of rows returned in a single batch" 
batch_size: Int!): [Graph_ql!]!
  "fetch data from the table: \"Graph_ql\"" 
Graph_ql("filter the rows returned" 
where: Graph_ql_bool_exp, "sort the rows by one or more columns" 
order_by: [Graph_ql_order_by!], "limit the number of rows returned" 
limit: Int, "skip the first n rows. Use only with order_by" 
offset: Int, "distinct select on columns" 
distinct_on: [Graph_ql_select_column!]): [Graph_ql!]!
  "fetch data from the table: \"Graph_ql\" using primary key columns" 
Graph_ql_by_pk(id: Int!): Graph_ql
}

"aggregate avg on columns" 
type Graph_ql_avg_fields { id: Float
}

"aggregate fields of \"Graph_ql\"" 
type Graph_ql_aggregate_fields { avg: Graph_ql_avg_fields
  count(distinct: Boolean, columns: [Graph_ql_select_column!]): Int!
  max: Graph_ql_max_fields
  min: Graph_ql_min_fields
  stddev: Graph_ql_stddev_fields
  stddev_pop: Graph_ql_stddev_pop_fields
  stddev_samp: Graph_ql_stddev_samp_fields
  sum: Graph_ql_sum_fields
  var_pop: Graph_ql_var_pop_fields
  var_samp: Graph_ql_var_samp_fields
  variance: Graph_ql_variance_fields
}

"aggregate max on columns" 
type Graph_ql_max_fields { id: Int
  name: String
}

"aggregate min on columns" 
type Graph_ql_min_fields { id: Int
  name: String
}

"aggregate stddev on columns" 
type Graph_ql_stddev_fields { id: Float
}

"aggregate stddev_pop on columns" 
type Graph_ql_stddev_pop_fields { id: Float
}

"aggregate stddev_samp on columns" 
type Graph_ql_stddev_samp_fields { id: Float
}

"aggregate sum on columns" 
type Graph_ql_sum_fields { id: Int
}

"aggregate var_pop on columns" 
type Graph_ql_var_pop_fields { id: Float
}

"aggregate var_samp on columns" 
type Graph_ql_var_samp_fields { id: Float
}

"aggregate variance on columns" 
type Graph_ql_variance_fields { id: Float
}

"aggregated selection of \"Graph_ql\"" 
type Graph_ql_aggregate { aggregate: Graph_ql_aggregate_fields
  nodes: [Graph_ql!]!
}

"columns and relationships of \"Graph_ql\"" 
type Graph_ql { id: Int!
  name: String!
}

"mutation root" 
type mutation_root { "delete data from the table: \"Graph_ql\"" 
delete_Graph_ql("filter the rows which have to be deleted" 
where: Graph_ql_bool_exp!): Graph_ql_mutation_response
  "delete single row from the table: \"Graph_ql\"" 
delete_Graph_ql_by_pk(id: Int!): Graph_ql
  "insert a single row into the table: \"Graph_ql\"" 
insert_Graph_ql_one("upsert condition" 
on_conflict: Graph_ql_on_conflict, "the row to be inserted" 
object: Graph_ql_insert_input!): Graph_ql
  "insert data into the table: \"Graph_ql\"" 
insert_Graph_ql("upsert condition" 
on_conflict: Graph_ql_on_conflict, "the rows to be inserted" 
objects: [Graph_ql_insert_input!]!): Graph_ql_mutation_response
  "update data of the table: \"Graph_ql\"" 
update_Graph_ql("sets the columns of the filtered rows to the given values" 
_set: Graph_ql_set_input, "increments the numeric columns with given value of the filtered values" 
_inc: Graph_ql_inc_input, "filter the rows which have to be updated" 
where: Graph_ql_bool_exp!): Graph_ql_mutation_response
  "update multiples rows of table: \"Graph_ql\"" 
update_Graph_ql_many("updates to execute, in order" 
updates: [Graph_ql_updates!]!): [Graph_ql_mutation_response]
  "update single row of the table: \"Graph_ql\"" 
update_Graph_ql_by_pk("sets the columns of the filtered rows to the given values" 
_set: Graph_ql_set_input, "increments the numeric columns with given value of the filtered values" 
_inc: Graph_ql_inc_input, pk_columns: Graph_ql_pk_columns_input!): Graph_ql
}

"response of any mutation on the table \"Graph_ql\"" 
type Graph_ql_mutation_response { "data from the rows affected by the mutation" 
returning: [Graph_ql!]!
  "number of rows affected by the mutation" 
affected_rows: Int!
}

enum __TypeKind {ENUM 
  INPUT_OBJECT 
  INTERFACE 
  LIST 
  NON_NULL 
  OBJECT 
  SCALAR 
  UNION 
}

"column ordering options" 
enum order_by {"in ascending order, nulls first" 
asc_nulls_first 
  "in ascending order, nulls last" 
asc 
  "in ascending order, nulls last" 
asc_nulls_last 
  "in descending order, nulls first" 
desc 
  "in descending order, nulls first" 
desc_nulls_first 
  "in descending order, nulls last" 
desc_nulls_last 
}

"ordering argument of a cursor" 
enum cursor_ordering {"ascending ordering of the cursor" 
ASC 
  "descending ordering of the cursor" 
DESC 
}

"select columns of table \"Graph_ql\"" 
enum Graph_ql_select_column {"column name" 
id 
  "column name" 
name 
}

"unique or primary key constraints on table \"Graph_ql\"" 
enum Graph_ql_constraint {"unique or primary key constraint on columns \"id\"" 
Graph_ql_pkey 
}

"update columns of table \"Graph_ql\"" 
enum Graph_ql_update_column {"column name" 
id 
  "column name" 
name 
}

input Graph_ql_updates {"filter the rows which have to be updated" 
where: Graph_ql_bool_exp!
  "increments the numeric columns with given value of the filtered values" 
_inc: Graph_ql_inc_input
  "sets the columns of the filtered rows to the given values" 
_set: Graph_ql_set_input
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'." 
input Int_comparison_exp {_eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'." 
input String_comparison_exp {_eq: String
  _gt: String
  _gte: String
  _in: [String!]
  _is_null: Boolean
  _lt: String
  _lte: String
  _neq: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive" 
_niregex: String
  "does the column NOT match the given POSIX regular expression, case sensitive" 
_nregex: String
  "does the column NOT match the given SQL regular expression" 
_nsimilar: String
  "does the column NOT match the given case-insensitive pattern" 
_nilike: String
  "does the column NOT match the given pattern" 
_nlike: String
  "does the column match the given POSIX regular expression, case insensitive" 
_iregex: String
  "does the column match the given POSIX regular expression, case sensitive" 
_regex: String
  "does the column match the given SQL regular expression" 
_similar: String
  "does the column match the given case-insensitive pattern" 
_ilike: String
  "does the column match the given pattern" 
_like: String
}

"Boolean expression to filter rows from the table \"Graph_ql\". All fields are combined with a logical 'AND'." 
input Graph_ql_bool_exp {_and: [Graph_ql_bool_exp!]
  _not: Graph_ql_bool_exp
  _or: [Graph_ql_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

"Initial value of the column from where the streaming should start" 
input Graph_ql_stream_cursor_value_input {id: Int
  name: String
}

"Ordering options when selecting data from \"Graph_ql\"." 
input Graph_ql_order_by {id: order_by
  name: order_by
}

"Streaming cursor of the table \"Graph_ql\"" 
input Graph_ql_stream_cursor_input {"Stream column input with initial value" 
initial_value: Graph_ql_stream_cursor_value_input!
  "cursor ordering" 
ordering: cursor_ordering
}

"input type for incrementing numeric columns in table \"Graph_ql\"" 
input Graph_ql_inc_input {id: Int
}

"input type for inserting data into table \"Graph_ql\"" 
input Graph_ql_insert_input {id: Int
  name: String
}

"input type for updating data in table \"Graph_ql\"" 
input Graph_ql_set_input {id: Int
  name: String
}

"on_conflict condition type for table \"Graph_ql\"" 
input Graph_ql_on_conflict {constraint: Graph_ql_constraint!
  update_columns: [Graph_ql_update_column!]! = []
  where: Graph_ql_bool_exp
}

"primary key columns input for table: Graph_ql" 
input Graph_ql_pk_columns_input {id: Int!
}